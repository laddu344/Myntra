pipeline {
    agent any

    tools {
        nodejs "node23" // NodeJS tool configured in Jenkins
    }

    environment {
        DOCKER_HUB_USER = 'varaprasadrenati'
        DOCKER_CREDENTIALS_ID = 'docker-creds'
        IMAGE_NAME = 'myntra-node-app'
        AWS_REGION = 'eu-north-1'
        EKS_CLUSTER = 'honey-cluster'
        HOME_BIN = '/var/lib/jenkins/bin'
        PATH = "/var/lib/jenkins/bin:/var/lib/jenkins/tools/jenkins.plugins.nodejs.tools.NodeJSInstallation/node23/bin:$PATH"
    }

    stages {

        stage('Setup Tools') {
            steps {
                script {
                    sh '''
                        mkdir -p $HOME_BIN

                        # Install eksctl if not present
                        if [ ! -f "$HOME_BIN/eksctl" ]; then
                            echo "Installing eksctl..."
                            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
                            mv /tmp/eksctl $HOME_BIN/
                            chmod +x $HOME_BIN/eksctl
                        fi

                        # Install kubectl if not present
                        if [ ! -f "$HOME_BIN/kubectl" ]; then
                            echo "Installing kubectl..."
                            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
                            chmod +x kubectl
                            mv kubectl $HOME_BIN/
                        fi

                        export PATH=$HOME_BIN:$PATH
                        eksctl version
                        kubectl version --client
                    '''
                }
            }
        }

        stage('Clone Code from GitHub') {
            steps {
                checkout([$class: 'GitSCM',
                    branches: [[name: '*/main']],
                    userRemoteConfigs: [[
                        url: 'https://github.com/laddu344/Myntra.git',
                        credentialsId: 'GITHUB_CREDENTIALS'
                    ]]
                ])
            }
        }

        stage('Install Dependencies') {
            steps {
                sh 'npm install'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    def imageTag = "${DOCKER_HUB_USER}/${IMAGE_NAME}:${BUILD_NUMBER}"
                    sh "docker build -t ${imageTag} ."
                }
            }
        }

        stage('Push Image to DockerHub') {
            steps {
                script {
                    def imageTag = "${DOCKER_HUB_USER}/${IMAGE_NAME}:${BUILD_NUMBER}"
                    withCredentials([usernamePassword(
                        credentialsId: "${DOCKER_CREDENTIALS_ID}",
                        usernameVariable: 'DOCKER_USER',
                        passwordVariable: 'DOCKER_PASS'
                    )]) {
                        sh '''
                            echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                        '''
                    }
                    sh "docker push ${imageTag}"
                }
            }
        }

        stage('Create EKS Cluster if Not Exists') {
            steps {
                script {
                    sh '''
                        export PATH=$HOME_BIN:$PATH
                        if ! eksctl get cluster --name ${EKS_CLUSTER} --region ${AWS_REGION} >/dev/null 2>&1; then
                            echo "Cluster not found. Creating EKS cluster..."
                            eksctl create cluster \
                                --name ${EKS_CLUSTER} \
                                --region ${AWS_REGION} \
                                --nodegroup-name standard-nodes \
                                --node-type t3.medium \
                                --nodes 2 \
                                --managed
                        else
                            echo "Cluster ${EKS_CLUSTER} already exists."
                        fi
                    '''
                }
            }
        }

        stage('Deploy to EKS Cluster') {
            steps {
                script {
                    sh '''
                        export PATH=$HOME_BIN:$PATH
                        aws eks update-kubeconfig --name ${EKS_CLUSTER} --region ${AWS_REGION}

                        # Ensure deployment.yaml exists
                        if [ ! -f deployment.yaml ]; then
                            echo "❌ deployment.yaml not found!"
                            exit 1
                        fi

                        # Update Docker image in deployment.yaml
                        sed -i "s|image: .*|image: ${DOCKER_HUB_USER}/${IMAGE_NAME}:${BUILD_NUMBER}|" deployment.yaml

                        # Apply manifests
                        kubectl apply -f deployment.yaml

                        # Wait for deployment rollout
                        if ! kubectl rollout status deployment/myntra-node-app-deployment --timeout=5m; then
                            echo "⚠️ Deployment failed, fetching pod logs..."
                            kubectl describe pods
                            kubectl logs $(kubectl get pods -l app=myntra-node-app -o jsonpath='{.items[0].metadata.name}')
                            exit 1
                        fi

                        # Retry loop for LoadBalancer URL
                        for i in {1..10}; do
                            APP_URL=$(kubectl get svc myntra-node-app-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
                            if [ ! -z "$APP_URL" ]; then
                                echo "✅ Application is live at: http://$APP_URL"
                                break
                            fi
                            echo "Waiting for LoadBalancer..."
                            sleep 15
                        done
                    '''
                }
            }
        }
    }

    post {
        success {
            echo "✅ Deployment successful!"
        }
        failure {
            echo "❌ Deployment failed! Check Jenkins logs for details."
        }
    }
}
